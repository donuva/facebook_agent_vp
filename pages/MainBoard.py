import streamlit as st
import pandas as pd
import datetime
import random

st.set_page_config(page_title="Facebook Agent Mainboard", layout="wide")
st.title("üë©‚Äçüíº Facebook Agent Mainboard")

# ======= D·ªØ li·ªáu m·∫´u c√≥ ƒë·ªß th√¥ng tin =======
random.seed(42)
admin_users = ["Admin A", "Admin B", "Admin C"]
intent_list = ["Gi√°", "Giao h√†ng", "B·∫£o h√†nh", "M√†u s·∫Øc", "S·ª≠ d·ª•ng", "Kh√°c"]

data = []
for i in range(50):
    date = datetime.date(2024, 7, random.randint(1,10))
    campaign = random.choice(["Summer2024", "Back2School", "Test"])
    user = random.choice(["Nguy·ªÖn A", "L√™ B", "Tr·∫ßn C", "Ho√†ng D", "Linh E"])
    question = f"C√¢u h·ªèi s·ªë {i+1} c·ªßa {user} ({random.choice(intent_list)})"
    answer = f"C√¢u tr·∫£ l·ªùi t·ª± ƒë·ªông {i+1}" if random.random()>0.25 else "Xin ch·ªù admin h·ªó tr·ª£."
    confidence = round(random.uniform(0.4, 0.99),2)
    fb_comment_id = str(1000+i)
    url = f"https://facebook.com/comment/{fb_comment_id}"
    admin_reply = "" if random.random()>0.5 else f"ƒê√£ ph·∫£n h·ªìi: {random.choice(admin_users)}"
    edit_log = "" if random.random()>0.5 else f"Ch·ªânh s·ª≠a b·ªüi {random.choice(admin_users)} l√∫c {date}."
    admin_note = "" if random.random()>0.7 else f"Ghi ch√∫ n·ªôi b·ªô {i}"
    feedback = "" if random.random()>0.7 else f"LLM y·∫øu ph·∫ßn n√†y"
    rating = random.choice([1,2,3,4,5,None,None])
    handled = random.choice([True, False])
    intent = random.choice(intent_list)
    data.append({
        "date": date,
        "campaign": campaign,
        "user": user,
        "question": question,
        "answer": answer,
        "confidence": confidence,
        "fb_comment_id": fb_comment_id,
        "url": url,
        "admin_reply": admin_reply,
        "edit_log": edit_log,
        "admin_note": admin_note,
        "feedback": feedback,
        "rating": rating,
        "handled": handled,
        "intent": intent,
        "last_editor": random.choice(admin_users) if edit_log else "",
        "last_edit_time": date if edit_log else "",
        "search": f"{user} {question} {answer}"
    })

df = pd.DataFrame(data)

# ========== B·ªô l·ªçc ==========
with st.sidebar:
    st.header("B·ªô l·ªçc")
    filter_date = st.date_input("L·ªçc theo ng√†y", value=None)
    filter_conf = st.slider("M·ª©c t·ª± tin LLM", 0.4, 1.0, (0.4, 1.0), 0.01)
    filter_campaign = st.multiselect("Chi·∫øn d·ªãch", options=list(df["campaign"].unique()), default=[])
    filter_user = st.multiselect("User", options=list(df["user"].unique()), default=[])
    filter_handled = st.radio("Tr·∫°ng th√°i x·ª≠ l√Ω", ["T·∫•t c·∫£", "ƒê√£ x·ª≠ l√Ω", "Ch∆∞a x·ª≠ l√Ω"])
    search_key = st.text_input("T√¨m ki·∫øm", "")
    st.markdown("---")
    st.write("**G·∫Øn intent/tag nhanh**")
    quick_intent = st.selectbox("Ch·ªçn intent ph·ªï bi·∫øn", [""] + intent_list)

# ========== ·ª®ng d·ª•ng b·ªô l·ªçc ==========
df_view = df.copy()
if filter_date:
    df_view = df_view[df_view["date"] == filter_date]
df_view = df_view[(df_view["confidence"] >= filter_conf[0]) & (df_view["confidence"] <= filter_conf[1])]
if filter_campaign:
    df_view = df_view[df_view["campaign"].isin(filter_campaign)]
if filter_user:
    df_view = df_view[df_view["user"].isin(filter_user)]
if filter_handled != "T·∫•t c·∫£":
    df_view = df_view[df_view["handled"] == (filter_handled == "ƒê√£ x·ª≠ l√Ω")]
if search_key:
    df_view = df_view[df_view["search"].str.lower().str.contains(search_key.lower())]
if quick_intent:
    df_view = df_view[df_view["intent"] == quick_intent]

# ========== Notification ==========
n_new_hard = len(df[(df["confidence"]<0.7)&(~df["handled"])])
if n_new_hard > 0:
    st.warning(f"‚ö° C√≥ {n_new_hard} c√¢u h·ªèi kh√≥ m·ªõi ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω!")

# ========== B√°o c√°o nhanh ==========
col1, col2, col3 = st.columns(3)
n_confident = len(df[df["confidence"]>=0.8])
n_hard = len(df[df["confidence"]<0.8])
avg_resp = round(df["confidence"].mean()*10, 2)
col1.metric("C√¢u t·ª± tin LLM", n_confident)
col2.metric("C√¢u c·∫ßn x·ª≠ l√Ω", n_hard)
col3.metric("M·ª©c t·ª± tin TB (%)", avg_resp*10)

# ========== 2 c·ªôt Mainboard ==========
left, right = st.columns(2)

# ... [gi·ªØ nguy√™n c√°c ph·∫ßn tr√™n] ...

with left:
    st.subheader("‚úÖ C√¢u tr·∫£ l·ªùi t·ª± tin (LLM confident)")
    conf_df = df_view[df_view['confidence'] >= 0.8]
    for i, row in conf_df.iterrows():
        with st.expander(f"{row['user']}: {row['question']} [{row['confidence']}]"):
            st.write(f"**Tr·∫£ l·ªùi:** {row['answer']}")
            st.write(f"**Chi·∫øn d·ªãch:** {row['campaign']}")
            st.write(f"**Intent:** {row['intent']}")
            st.write(f"[‚û°Ô∏è Xem b√¨nh lu·∫≠n Facebook]({row['url']})")
            st.write(f"**Nh·∫≠t k√Ω:** {row['edit_log']}")
            llm_score = st.slider(
                f"Ch·∫•m ƒëi·ªÉm LLM (1-5)",
                1, 5,
                int(row["rating"]) if pd.notna(row["rating"]) else 3,
                step=1,
                key=f"score{row['fb_comment_id']}"
            )
            feedback = st.text_area("G√≥p √Ω cho chatbot", value=row["feedback"], key=f"fb{row['fb_comment_id']}")
            note = st.text_area("Ghi ch√∫ n·ªôi b·ªô", value=row["admin_note"], key=f"note{row['fb_comment_id']}")
            st.write(f"**L·∫ßn ch·ªânh g·∫ßn nh·∫•t:** {row['last_editor']} - {row['last_edit_time']}")
            new_intent = st.selectbox("G·∫Øn intent", intent_list, index=intent_list.index(row["intent"]), key=f"intent{row['fb_comment_id']}")

with right:
    st.subheader("ü§î C√¢u h·ªèi kh√≥ (LLM kh√¥ng t·ª± tin)")
    hard_df = df_view[df_view['confidence'] < 0.8]
    for i, row in hard_df.iterrows():
        with st.expander(f"{row['user']}: {row['question']} [{row['confidence']}]"):
            st.write(f"**G·ª£i √Ω tr·∫£ l·ªùi:** {row['answer']}")
            st.write(f"**Chi·∫øn d·ªãch:** {row['campaign']}")
            st.write(f"**Intent:** {row['intent']}")
            st.write(f"[‚û°Ô∏è Xem b√¨nh lu·∫≠n Facebook]({row['url']})")
            new_reply = st.text_area("Ph·∫£n h·ªìi c·ªßa admin", value=row["admin_reply"], key=f"admrep{row['fb_comment_id']}")
            mark = st.checkbox("ƒê√£ x·ª≠ l√Ω", value=row["handled"], key=f"mark{row['fb_comment_id']}")
            note = st.text_area("Ghi ch√∫ n·ªôi b·ªô", value=row["admin_note"], key=f"note2{row['fb_comment_id']}")
            st.write(f"**Nh·∫≠t k√Ω:** {row['edit_log']}")
            llm_score = st.slider(
                f"Ch·∫•m ƒëi·ªÉm LLM (1-5)",
                1, 5,
                int(row["rating"]) if pd.notna(row["rating"]) else 3,
                step=1,
                key=f"score{row['fb_comment_id']}"
            )

            feedback = st.text_area("G√≥p √Ω cho chatbot", value=row["feedback"], key=f"fb2{row['fb_comment_id']}")
            new_intent = st.selectbox("G·∫Øn intent", intent_list, index=intent_list.index(row["intent"]), key=f"intent2{row['fb_comment_id']}")
            st.write(f"**L·∫ßn ch·ªânh g·∫ßn nh·∫•t:** {row['last_editor']} - {row['last_edit_time']}")

# ========== Nh·∫≠t k√Ω ho·∫°t ƒë·ªông ==========
st.markdown("---")
st.subheader("üìã Nh·∫≠t k√Ω ho·∫°t ƒë·ªông")
log_data = df[["fb_comment_id", "user", "question", "last_editor", "last_edit_time", "edit_log"]]
st.dataframe(log_data, hide_index=True)

# ========== L·ªãch s·ª≠ ch·ªânh s·ª≠a ==========
st.subheader("üïë L·ªãch s·ª≠ ch·ªânh s·ª≠a admin")
edit_logs = df[df["edit_log"]!=""][["fb_comment_id", "edit_log"]]
st.dataframe(edit_logs, hide_index=True)
