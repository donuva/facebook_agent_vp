import streamlit as st
import pandas as pd
from db_actions import load_all, update_admin_fields

st.set_page_config(page_title="Facebook Agent Mainboard", layout="wide")
st.title("üë©‚Äçüíº Facebook Agent Mainboard")

# ======= ƒê·ªãnh nghƒ©a intent v√† admin =======
intent_list = ["Account Types",
                "Card Types",
                "Online Services (Business)"]
admin_users = ["Admin A", "Admin B"] 

# ======= LOAD D·ªÆ LI·ªÜU TH·∫¨T T·ª™ DB =======
df = load_all()

# ƒê·∫£m b·∫£o ƒë·ªß c·ªôt (n·∫øu thi·∫øu th√¨ t·∫°o c·ªôt tr·ªëng)
columns_needed = [
    "date", "campaign", "user", "question", "answer", "confidence", "fb_comment_id",
    "url", "admin_reply", "edit_log", "admin_note", "feedback", "rating", "handled",
    "intent", "last_editor", "last_edit_time", "search"
]
for col in columns_needed:
    if col not in df.columns:
        df[col] = ""

# ========== GIAO DI·ªÜN B·ªò L·ªåC ==========
with st.sidebar:
    st.header("B·ªô l·ªçc")
    filter_date = st.date_input("L·ªçc theo ng√†y", value=None)
    try:
        filter_conf = st.slider("M·ª©c t·ª± tin LLM", 0.4, 1.0, (0.4, 1.0), 0.01)
    except:
        filter_conf = (0.4, 1.0)
    filter_campaign = st.multiselect("Chi·∫øn d·ªãch", options=list(df["campaign"].unique()), default=[])
    filter_user = st.multiselect("User", options=list(df["user"].unique()), default=[])
    filter_handled = st.radio("Tr·∫°ng th√°i x·ª≠ l√Ω", ["T·∫•t c·∫£", "ƒê√£ x·ª≠ l√Ω", "Ch∆∞a x·ª≠ l√Ω"])
    search_key = st.text_input("T√¨m ki·∫øm", "")
    st.markdown("---")
    st.write("**G·∫Øn intent/tag nhanh**")
    quick_intent = st.selectbox("Ch·ªçn intent ph·ªï bi·∫øn", [""] + intent_list)

# ========== √ÅP D·ª§NG B·ªò L·ªåC ========== 
df_view = df.copy()
if filter_date:
    # Chuy·ªÉn ƒë·ªïi tr∆∞·ªùng "date" th√†nh ng√†y v√† so s√°nh v·ªõi filter_date
    df_view['date'] = pd.to_datetime(df_view['date']).dt.date  # Ch·ªâ l·∫•y ph·∫ßn ng√†y
    df_view = df_view[df_view["date"] == filter_date]
df_view = df_view[(df_view["confidence"].astype(str).astype(float) >= filter_conf[0]) & (df_view["confidence"].astype(str).astype(float) <= filter_conf[1])]
if filter_campaign:
    df_view = df_view[df_view["campaign"].isin(filter_campaign)]
if filter_user:
    df_view = df_view[df_view["user"].isin(filter_user)]
if filter_handled != "T·∫•t c·∫£":
    handled_val = (filter_handled == "ƒê√£ x·ª≠ l√Ω")
    df_view = df_view[df_view["handled"].astype(str).apply(lambda x: x in ["1", "True", "true"]) == handled_val]
if search_key:
    df_view = df_view[df_view["search"].str.lower().str.contains(search_key.lower())]
if quick_intent:
    df_view = df_view[df_view["intent"] == quick_intent]


# ========== C·∫¢NH B√ÅO C√ÇU KH√ì ==========
try:
    n_new_hard = len(df[(df["confidence"].astype(float) < 0.75) & (~df["handled"].astype(str).isin(["1", "True", "true"]))])
except:
    n_new_hard = 0
if n_new_hard > 0:
    st.warning(f"‚ö° C√≥ {n_new_hard} c√¢u h·ªèi kh√≥ m·ªõi ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω!")

# ========== B√ÅO C√ÅO T·ªîNG QU√ÅT ==========
col1, col2, col3 = st.columns(3)
try:
    n_confident = len(df[df["confidence"].astype(float) >= 0.75])
    n_hard = len(df[df["confidence"].astype(float) < 0.75])
    avg_resp = round(df["confidence"].astype(float).mean() * 10, 2)
except:
    n_confident = 0
    n_hard = 0
    avg_resp = 0
col1.metric("C√¢u t·ª± tin LLM", n_confident)
col2.metric("C√¢u c·∫ßn x·ª≠ l√Ω", n_hard)
col3.metric("M·ª©c t·ª± tin TB (%)", avg_resp * 10)

# ========== HI·ªÇN TH·ªä MAINBOARD ========== 
left, right = st.columns(2)

def save_admin_edit(row, note, feedback, admin_reply, handled, rating, intent, editor):
    from datetime import datetime
    update_admin_fields(
        fb_comment_id=row['fb_comment_id'],
        admin_note=note,
        feedback=feedback,
        admin_reply=admin_reply,
        handled=handled,
        rating=rating,
        last_editor=editor,
    )
    st.success("ƒê√£ l∆∞u ch·ªânh s·ª≠a!")

# C·ªôt tr√°i: C√¢u LLM t·ª± tin
with left:
    st.subheader("‚úÖ C√¢u tr·∫£ l·ªùi t·ª± tin ")
    conf_df = df_view[df_view['confidence'].astype(float) >= 0.75]
    for i, row in conf_df.iterrows():
        with st.expander(f"{row['user']}: {row['question']} [{row['confidence']}]"):
            st.write(f"**Tr·∫£ l·ªùi:** {row['answer']}")
            st.write(f"**Chi·∫øn d·ªãch:** {row['campaign']}")
            st.write(f"**Intent:** {row['intent']}")
            st.write(f"[‚û°Ô∏è Xem b√¨nh lu·∫≠n Facebook]({row['url']})")
            st.write(f"**Nh·∫≠t k√Ω:** {row['edit_log']}")
            llm_score = st.slider(
                f"Ch·∫•m ƒëi·ªÉm LLM (1-5)",
                1, 5,
                int(row["rating"]) if pd.notna(row["rating"]) and str(row["rating"]).isdigit() else 3,
                step=1,
                key=f"score{row['fb_comment_id']}"
            )
            feedback = st.text_area("G√≥p √Ω cho chatbot", value=row["feedback"], key=f"fb{row['fb_comment_id']}")
            note = st.text_area("Ghi ch√∫ n·ªôi b·ªô", value=row["admin_note"], key=f"note{row['fb_comment_id']}")
            admin_reply = st.text_area("Ph·∫£n h·ªìi admin", value=row["admin_reply"], key=f"admrep{row['fb_comment_id']}")
            intent_val = st.selectbox("G·∫Øn intent", intent_list, index=intent_list.index(row["intent"]) if row["intent"] in intent_list else 0, key=f"intent{row['fb_comment_id']}")
            handled = st.checkbox("ƒê√£ x·ª≠ l√Ω", value=(str(row["handled"]).lower() in ["1", "true"]), key=f"handled{row['fb_comment_id']}")
            editor = st.selectbox("Ng∆∞·ªùi ch·ªânh", admin_users, key=f"editor{row['fb_comment_id']}")
            if st.button("L∆∞u ch·ªânh s·ª≠a", key=f"save{row['fb_comment_id']}"):
                save_admin_edit(row, note, feedback, admin_reply, handled, llm_score, intent_val, editor)
                st.rerun()

# # C·ªôt ph·∫£i: C√¢u h·ªèi kh√≥
# with right:
#     st.subheader("ü§î C√¢u h·ªèi kh√≥")
#     hard_df = df_view[df_view['confidence'].astype(float) < 0.75]
#     for i, row in hard_df.iterrows():
#         with st.expander(f"{row['user']}: {row['question']} [{row['confidence']}]"):
#             st.write(f"**G·ª£i √Ω tr·∫£ l·ªùi:** {row['answer']}")
#             st.write(f"**Chi·∫øn d·ªãch:** {row['campaign']}")
#             st.write(f"**Intent:** {row['intent']}")
#             st.write(f"[‚û°Ô∏è Xem b√¨nh lu·∫≠n Facebook]({row['url']})")
#             note = st.text_area("Ghi ch√∫ n·ªôi b·ªô", value=row["admin_note"], key=f"note2{row['fb_comment_id']}")
#             feedback = st.text_area("G√≥p √Ω cho chatbot", value=row["feedback"], key=f"fb2{row['fb_comment_id']}")
#             admin_reply = st.text_area("Ph·∫£n h·ªìi admin", value=row["admin_reply"], key=f"admrep2{row['fb_comment_id']}")
#             llm_score = st.slider(
#                 f"Ch·∫•m ƒëi·ªÉm LLM (1-5)",
#                 1, 5,
#                 int(row["rating"]) if pd.notna(row["rating"]) and str(row["rating"]).isdigit() else 3,
#                 step=1,
#                 key=f"score2{row['fb_comment_id']}"
#             )
#             intent_val = st.selectbox("G·∫Øn intent", intent_list, index=intent_list.index(row["intent"]) if row["intent"] in intent_list else 0, key=f"intent2{row['fb_comment_id']}")
#             handled = st.checkbox("ƒê√£ x·ª≠ l√Ω", value=(str(row["handled"]).lower() in ["1", "true"]), key=f"handled2{row['fb_comment_id']}")
#             editor = st.selectbox("Ng∆∞·ªùi ch·ªânh", admin_users, key=f"editor2{row['fb_comment_id']}")
#             if st.button("L∆∞u ch·ªânh s·ª≠a", key=f"save2{row['fb_comment_id']}"):
#                 save_admin_edit(row, note, feedback, admin_reply, handled, llm_score, intent_val, editor)
#                 st.rerun()

with right:
    st.subheader("ü§î C√¢u h·ªèi kh√≥ (LLM kh√¥ng t·ª± tin)")
    hard_df = df[(df["confidence"].astype(float) < 0.75)]  # L·ªçc t·ª´ df g·ªëc, kh√¥ng ph·∫£i df_view, v√¨ c√≥ th·ªÉ b·ªã lo·∫°i trong filter kh√°c
    # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i ch∆∞a
    if hard_df.empty:
        st.info("Kh√¥ng c√≥ c√¢u h·ªèi kh√≥ trong d·ªØ li·ªáu ƒë∆∞·ª£c l·ªçc.")
    for i, row in hard_df.iterrows():
        with st.expander(f"{row['user']}: {row['question']} [{row['confidence']}]"):
            st.write(f"**G·ª£i √Ω tr·∫£ l·ªùi:** {row['answer']}")
            st.write(f"**Chi·∫øn d·ªãch:** {row['campaign']}")
            st.write(f"**Intent:** {row['intent']}")
            st.write(f"[‚û°Ô∏è Xem b√¨nh lu·∫≠n Facebook]({row['url']})")
            note = st.text_area("Ghi ch√∫ n·ªôi b·ªô", value=row["admin_note"], key=f"note2{row['fb_comment_id']}")
            feedback = st.text_area("G√≥p √Ω cho chatbot", value=row["feedback"], key=f"fb2{row['fb_comment_id']}")
            admin_reply = st.text_area("Ph·∫£n h·ªìi admin", value=row["admin_reply"], key=f"admrep2{row['fb_comment_id']}")
            llm_score = st.slider(
                f"Ch·∫•m ƒëi·ªÉm LLM (1-5)",
                1, 5,
                int(row["rating"]) if pd.notna(row["rating"]) and str(row["rating"]).isdigit() else 3,
                step=1,
                key=f"score2{row['fb_comment_id']}"
            )
            intent_val = st.selectbox("G·∫Øn intent", intent_list, index=intent_list.index(row["intent"]) if row["intent"] in intent_list else 0, key=f"intent2{row['fb_comment_id']}")
            handled = st.checkbox("ƒê√£ x·ª≠ l√Ω", value=(str(row["handled"]).lower() in ["1", "true"]), key=f"handled2{row['fb_comment_id']}")
            editor = st.selectbox("Ng∆∞·ªùi ch·ªânh", admin_users, key=f"editor2{row['fb_comment_id']}")
            if st.button("L∆∞u ch·ªânh s·ª≠a", key=f"save2{row['fb_comment_id']}"):
                save_admin_edit(row, note, feedback, admin_reply, handled, llm_score, intent_val, editor)
                st.rerun()

# ========== B·∫¢NG NH·∫¨T K√ù ==========
st.markdown("---")
st.subheader("üìã Nh·∫≠t k√Ω ho·∫°t ƒë·ªông")
log_data = df[["fb_comment_id", "user", "question", "last_editor", "last_edit_time", "edit_log"]] if all(col in df.columns for col in ["fb_comment_id", "user", "question", "last_editor", "last_edit_time", "edit_log"]) else pd.DataFrame()
if not log_data.empty:
    st.dataframe(log_data, hide_index=True)

# ========== L·ªäCH S·ª¨ CH·ªàNH S·ª¨A ==========
st.subheader("üïë L·ªãch s·ª≠ ch·ªânh s·ª≠a admin")
if "edit_log" in df.columns:
    edit_logs = df[df["edit_log"] != ""][["fb_comment_id", "edit_log"]]
    st.dataframe(edit_logs, hide_index=True)
